# see package.json and documentation in intera wiki.
n = {}
require("coffee-script")
fs = require("fs")
log = require("./lib/logger").log
deepCopy = require("ncp").ncp
n.path = require("path")
_ = require("underscore")
util = require("./lib/utility")

default_config =
  javascript_base_path: "js/"
  css_base_path: "css/"
  html_base_path: "html/"
  source_dir: ""
  target_dir: "../distrib/"

add_suffix_html = util.add_suffix_func ".html"
add_suffix_css = util.add_suffix_func ".css"
add_suffix_js = util.add_suffix_func ".js"

prepare_config = (arg) ->
  throw "missing configuration object" unless arg
  arg = _.defaults(arg, default_config)
  arg.target_dir = util.ensure_trailing_slash(arg.target_dir)
  arg.source_dir = util.ensure_trailing_slash(arg.source_dir)
  arg

any_to_array = (arg) ->
  if _.isArray(arg) then arg else [arg]

wbc_script = (config) ->
  log "compress_script", 1
  util.validate_script_config config
  config.script.forEach (config_script) ->
    target_path = add_suffix_js config.target_dir + config_script.target
    util.ensure_directory_structure n.path.dirname(target_path)
    util.create_file target_path
    source_paths = any_to_array(config_script.sources).map (path) ->
      add_suffix_js config.source_dir + config.javascript_base_path + path
    source_paths.forEach (path) ->
      log "reading " + path
    log "writing #{target_path}"
    util.append_files target_path, source_paths
    if !config.debug
      log "compressing #{target_path}"
      util.process_file target_path, util.compressJs
    if config_script.gzip
      log "creating #{target_path}.gz"
      util.create_gzip_copy target_path

wbc_style = (config) ->
  log "compress_css", 1
  config.style.forEach (ele) ->
    target_path = add_suffix_css config.target_dir + ele.target
    log "creating " + target_path
    util.ensure_directory_structure n.path.dirname(target_path)
    util.create_file target_path
    source_paths = any_to_array(ele.sources).map (path) ->
      add_suffix_css config.source_dir + config.css_base_path + path
    source_paths.forEach (path) ->
      log "reading " + path
    log "writing #{target_path}"
    util.append_files target_path, source_paths
    if !config.debug
      log "compressing #{target_path}"
      util.process_file target_path, util.compressCss
    if ele.gzip
      log "creating #{target_path}.gz"
      util.create_gzip_copy target_path
  log "", -1

wbc_html = (config) ->
  log "compressHtml", 1
  config.html.forEach (ele) ->
    target_path = add_suffix_html config.target_dir + ele.target
    util.ensure_directory_structure n.path.dirname(target_path)
    util.create_file target_path
    source_paths = any_to_array(ele.sources).map (path) ->
      add_suffix_html config.source_dir + config.html_base_path + path
    source_paths.forEach (path) ->
      log "reading " + path
    log "writing #{target_path}"
    util.append_files target_path, source_paths
    if !config.debug
      log "compressing #{target_path}"
      util.process_file target_path, util.compressHtml
    if ele.gzip
      log "creating #{target_path}.gz"
      util.create_gzip_copy target_path
  log "", -1

wbc_sync = (config) ->
  log "sync", 1
  config.sync.forEach (config_sync) ->
    if _.isArray config_sync
      source_path = config.source_dir + config_sync[0]
      target_path = config.target_dir + config_sync[1]
    else
      source_path = config.source_dir + config_sync
      target_path = config.target_dir + config_sync
    log "copying #{source_path} -> #{target_path}"
    deepCopy source_path, target_path, ->
  log "", -1

create_build = (config) ->
  try
    config = prepare_config config
    util.ensure_directory_structure config.target_dir
    if config.style then wbc_style config
    if config.html then wbc_html config
    if config.sync then wbc_sync config
    if config.script then wbc_script config
    log "success"
  catch exc
    try
      logger.display_log()
    if exc
      console.log "Syntax error in Javascript"
      console.log "#{exc.message}" + " line #{5}, column #{29}"
      console.log "Stack trace:\n#{exc.stack}"
    else
      console.log exc
    #throw exc

exports.create_build = create_build
